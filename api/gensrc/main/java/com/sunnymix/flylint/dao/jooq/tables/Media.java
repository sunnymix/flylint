/*
 * This file is generated by jOOQ.
 */
package com.sunnymix.flylint.dao.jooq.tables;


import com.sunnymix.flylint.api.common.jooq.converter.LocalDateTimeToOffsetDateTimeConverter;
import com.sunnymix.flylint.dao.jooq.Flylint;
import com.sunnymix.flylint.dao.jooq.Keys;
import com.sunnymix.flylint.dao.jooq.tables.records.MediaRecord;

import java.time.OffsetDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Media extends TableImpl<MediaRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>flylint.media</code>
     */
    public static final Media MEDIA = new Media();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MediaRecord> getRecordType() {
        return MediaRecord.class;
    }

    /**
     * The column <code>flylint.media.id</code>. ID
     */
    public final TableField<MediaRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "ID");

    /**
     * The column <code>flylint.media.name</code>. Name
     */
    public final TableField<MediaRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "Name");

    /**
     * The column <code>flylint.media.type</code>. 类型
     */
    public final TableField<MediaRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(50).nullable(false).defaultValue(DSL.inline("image", SQLDataType.VARCHAR)), this, "类型");

    /**
     * The column <code>flylint.media.ext</code>. 扩展名
     */
    public final TableField<MediaRecord, String> EXT = createField(DSL.name("ext"), SQLDataType.VARCHAR(50).nullable(false).defaultValue(DSL.inline(".jpg", SQLDataType.VARCHAR)), this, "扩展名");

    /**
     * The column <code>flylint.media.url</code>. 链接
     */
    public final TableField<MediaRecord, String> URL = createField(DSL.name("url"), SQLDataType.VARCHAR(1000).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "链接");

    /**
     * The column <code>flylint.media.created</code>. 创建时间
     */
    public final TableField<MediaRecord, OffsetDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "创建时间", new LocalDateTimeToOffsetDateTimeConverter());

    /**
     * The column <code>flylint.media.updated</code>. 更新时间
     */
    public final TableField<MediaRecord, OffsetDateTime> UPDATED = createField(DSL.name("updated"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "更新时间", new LocalDateTimeToOffsetDateTimeConverter());

    private Media(Name alias, Table<MediaRecord> aliased) {
        this(alias, aliased, null);
    }

    private Media(Name alias, Table<MediaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>flylint.media</code> table reference
     */
    public Media(String alias) {
        this(DSL.name(alias), MEDIA);
    }

    /**
     * Create an aliased <code>flylint.media</code> table reference
     */
    public Media(Name alias) {
        this(alias, MEDIA);
    }

    /**
     * Create a <code>flylint.media</code> table reference
     */
    public Media() {
        this(DSL.name("media"), null);
    }

    public <O extends Record> Media(Table<O> child, ForeignKey<O, MediaRecord> key) {
        super(child, key, MEDIA);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Flylint.FLYLINT;
    }

    @Override
    public Identity<MediaRecord, Long> getIdentity() {
        return (Identity<MediaRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<MediaRecord> getPrimaryKey() {
        return Keys.KEY_MEDIA_PRIMARY;
    }

    @Override
    public Media as(String alias) {
        return new Media(DSL.name(alias), this);
    }

    @Override
    public Media as(Name alias) {
        return new Media(alias, this);
    }

    @Override
    public Media as(Table<?> alias) {
        return new Media(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Media rename(String name) {
        return new Media(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Media rename(Name name) {
        return new Media(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Media rename(Table<?> name) {
        return new Media(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, String, String, String, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Long, ? super String, ? super String, ? super String, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Long, ? super String, ? super String, ? super String, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
