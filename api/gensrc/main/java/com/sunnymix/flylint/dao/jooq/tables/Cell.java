/*
 * This file is generated by jOOQ.
 */
package com.sunnymix.flylint.dao.jooq.tables;


import com.sunnymix.flylint.api.common.jooq.converter.LocalDateTimeToOffsetDateTimeConverter;
import com.sunnymix.flylint.dao.jooq.Flylint;
import com.sunnymix.flylint.dao.jooq.Indexes;
import com.sunnymix.flylint.dao.jooq.Keys;
import com.sunnymix.flylint.dao.jooq.tables.records.CellRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function12;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Cell extends TableImpl<CellRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>flylint.cell</code>
     */
    public static final Cell CELL = new Cell();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CellRecord> getRecordType() {
        return CellRecord.class;
    }

    /**
     * The column <code>flylint.cell.id</code>. ID
     */
    public final TableField<CellRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "ID");

    /**
     * The column <code>flylint.cell.type</code>. 类型
     */
    public final TableField<CellRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(50).nullable(false).defaultValue(DSL.inline("cell", SQLDataType.VARCHAR)), this, "类型");

    /**
     * The column <code>flylint.cell.sheet</code>. 表格
     */
    public final TableField<CellRecord, String> SHEET = createField(DSL.name("sheet"), SQLDataType.VARCHAR(100).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "表格");

    /**
     * The column <code>flylint.cell.col</code>. 列
     */
    public final TableField<CellRecord, Integer> COL = createField(DSL.name("col"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "列");

    /**
     * The column <code>flylint.cell.row</code>. 行
     */
    public final TableField<CellRecord, Integer> ROW = createField(DSL.name("row"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "行");

    /**
     * The column <code>flylint.cell.col_size</code>. 列数
     */
    public final TableField<CellRecord, Integer> COL_SIZE = createField(DSL.name("col_size"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("1", SQLDataType.INTEGER)), this, "列数");

    /**
     * The column <code>flylint.cell.row_size</code>. 行数
     */
    public final TableField<CellRecord, Integer> ROW_SIZE = createField(DSL.name("row_size"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("1", SQLDataType.INTEGER)), this, "行数");

    /**
     * The column <code>flylint.cell.width</code>. 宽度
     */
    public final TableField<CellRecord, Integer> WIDTH = createField(DSL.name("width"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("200", SQLDataType.INTEGER)), this, "宽度");

    /**
     * The column <code>flylint.cell.height</code>. 高度
     */
    public final TableField<CellRecord, Integer> HEIGHT = createField(DSL.name("height"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("30", SQLDataType.INTEGER)), this, "高度");

    /**
     * The column <code>flylint.cell.content</code>. 内容
     */
    public final TableField<CellRecord, String> CONTENT = createField(DSL.name("content"), SQLDataType.CLOB.nullable(false), this, "内容");

    /**
     * The column <code>flylint.cell.created</code>. 创建时间
     */
    public final TableField<CellRecord, OffsetDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "创建时间", new LocalDateTimeToOffsetDateTimeConverter());

    /**
     * The column <code>flylint.cell.updated</code>. 更新时间
     */
    public final TableField<CellRecord, OffsetDateTime> UPDATED = createField(DSL.name("updated"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "更新时间", new LocalDateTimeToOffsetDateTimeConverter());

    private Cell(Name alias, Table<CellRecord> aliased) {
        this(alias, aliased, null);
    }

    private Cell(Name alias, Table<CellRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>flylint.cell</code> table reference
     */
    public Cell(String alias) {
        this(DSL.name(alias), CELL);
    }

    /**
     * Create an aliased <code>flylint.cell</code> table reference
     */
    public Cell(Name alias) {
        this(alias, CELL);
    }

    /**
     * Create a <code>flylint.cell</code> table reference
     */
    public Cell() {
        this(DSL.name("cell"), null);
    }

    public <O extends Record> Cell(Table<O> child, ForeignKey<O, CellRecord> key) {
        super(child, key, CELL);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Flylint.FLYLINT;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CELL_UK_CELL);
    }

    @Override
    public Identity<CellRecord, Long> getIdentity() {
        return (Identity<CellRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CellRecord> getPrimaryKey() {
        return Keys.KEY_CELL_PRIMARY;
    }

    @Override
    public Cell as(String alias) {
        return new Cell(DSL.name(alias), this);
    }

    @Override
    public Cell as(Name alias) {
        return new Cell(alias, this);
    }

    @Override
    public Cell as(Table<?> alias) {
        return new Cell(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Cell rename(String name) {
        return new Cell(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cell rename(Name name) {
        return new Cell(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cell rename(Table<?> name) {
        return new Cell(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Long, String, String, Integer, Integer, Integer, Integer, Integer, Integer, String, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function12<? super Long, ? super String, ? super String, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function12<? super Long, ? super String, ? super String, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
