/*
 * This file is generated by jOOQ.
 */
package com.sunnymix.flylint.dao.jooq.tables;


import com.sunnymix.flylint.api.common.jooq.converter.LocalDateTimeToOffsetDateTimeConverter;
import com.sunnymix.flylint.dao.jooq.Flylint;
import com.sunnymix.flylint.dao.jooq.Indexes;
import com.sunnymix.flylint.dao.jooq.Keys;
import com.sunnymix.flylint.dao.jooq.tables.records.ColRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Col extends TableImpl<ColRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>flylint.col</code>
     */
    public static final Col COL = new Col();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ColRecord> getRecordType() {
        return ColRecord.class;
    }

    /**
     * The column <code>flylint.col.id</code>. ID
     */
    public final TableField<ColRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "ID");

    /**
     * The column <code>flylint.col.sheet</code>. 表格
     */
    public final TableField<ColRecord, String> SHEET = createField(DSL.name("sheet"), SQLDataType.VARCHAR(100).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "表格");

    /**
     * The column <code>flylint.col.col</code>. 列
     */
    public final TableField<ColRecord, Integer> COL_ = createField(DSL.name("col"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "列");

    /**
     * The column <code>flylint.col.width</code>. 宽度
     */
    public final TableField<ColRecord, Integer> WIDTH = createField(DSL.name("width"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("200", SQLDataType.INTEGER)), this, "宽度");

    /**
     * The column <code>flylint.col.created</code>. 创建时间
     */
    public final TableField<ColRecord, OffsetDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "创建时间", new LocalDateTimeToOffsetDateTimeConverter());

    /**
     * The column <code>flylint.col.updated</code>. 更新时间
     */
    public final TableField<ColRecord, OffsetDateTime> UPDATED = createField(DSL.name("updated"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "更新时间", new LocalDateTimeToOffsetDateTimeConverter());

    private Col(Name alias, Table<ColRecord> aliased) {
        this(alias, aliased, null);
    }

    private Col(Name alias, Table<ColRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>flylint.col</code> table reference
     */
    public Col(String alias) {
        this(DSL.name(alias), COL);
    }

    /**
     * Create an aliased <code>flylint.col</code> table reference
     */
    public Col(Name alias) {
        this(alias, COL);
    }

    /**
     * Create a <code>flylint.col</code> table reference
     */
    public Col() {
        this(DSL.name("col"), null);
    }

    public <O extends Record> Col(Table<O> child, ForeignKey<O, ColRecord> key) {
        super(child, key, COL);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Flylint.FLYLINT;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.COL_UK_CELL);
    }

    @Override
    public Identity<ColRecord, Long> getIdentity() {
        return (Identity<ColRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ColRecord> getPrimaryKey() {
        return Keys.KEY_COL_PRIMARY;
    }

    @Override
    public Col as(String alias) {
        return new Col(DSL.name(alias), this);
    }

    @Override
    public Col as(Name alias) {
        return new Col(alias, this);
    }

    @Override
    public Col as(Table<?> alias) {
        return new Col(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Col rename(String name) {
        return new Col(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Col rename(Name name) {
        return new Col(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Col rename(Table<?> name) {
        return new Col(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, Integer, Integer, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Long, ? super String, ? super Integer, ? super Integer, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Long, ? super String, ? super Integer, ? super Integer, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
